#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import sys
import json

from argparse import ArgumentParser
from base64 import b64encode
from pprint import pprint
from time import sleep
from uuid import uuid4

import requests

from keystoneauth1 import loading, session, exceptions
from swiftclient.service import SwiftError, SwiftService, SwiftUploadObject

DEBUG_MODE = False
STATUS_LOOP_LIMIT = 40
IMPORT_STATUS_WAIT = 300
IMPORT_STATUS_INTERVAL = 60
IMPORT_STATUS_MSG = ' HTTP {} {} ({}%)'
IMPORT_BASE_URL = 'https://vmimport.{}.cloud.global.fujitsu.com/v1/imageimport'

HELP_DEBUG = 'Print debug information'
HELP_SHA1 = '(Experimental) SHA1 checksum of the image file'
HELP_MIN_RAM = 'Minimum amount of memory required to use the image (MB)'
HELP_MIN_DISK = 'Minimum amount of disk space required to use the image (GB)'
HELP_CONTAINER = 'Name of the object storage container'

# Following regions require more arguments than e.g. UK region. So when one of
# these regions are detected, additional arguments are included to image
# registeration request.
DEMANDING_REGIONS = ['de-1', 'es-1', 'fi-1']

# "Fujitsu Cloud Service K5 IaaS Foundation Service API Reference version 2.0"
# says that the possible values include: Rhel | centos | ubuntu
# "Fujitsu Cloud Service K5 IaaS Features Handbook version 2.7" says the
# possible values include: rhel6 | rhel7 | centos | ubuntu
HELP_OS_TYPE = \
"""Specify the type of the operating system. See some documentation for
possible values. If not specified, default value 'ubuntu' is used."""

SUCCESS_MSG = """
Status:       {}
ID:           {}
Name:         {}
Min RAM/disk: {} MB / {} GB
"""


def debug(obj):
    if DEBUG_MODE: pprint(obj)

def get_env(name):
    """
    Get environment variable and return it
    """
    try:
        val = os.environ[name]
    except KeyError:
        print("error: Environment variable %s not set" % name, file=sys.stderr)
        sys.exit(1)
    return val


def get_auth_token(opts):
    """
    Authenticate using keystone session and return auth token
    """
    loader = loading.get_plugin_loader('password')
    auth = loader.load_from_options(
        auth_url=opts['auth_url'],
        username=opts['username'],
        password=opts['password'],
        project_id=opts['project_id'],
        user_domain_name=opts['domain_name']
    )
    sess = session.Session(auth=auth)
    try:
        headers = sess.get_auth_headers()
        token = headers.get('X-Auth-Token', None)
    except exceptions.http.Unauthorized:
        print("error: Unauthorized", file=sys.stderr)
        sys.exit(1)
    except:
        print("error: Authentication failed", file=sys.stderr)
        sys.exit(1)
    return token


def upload(opts):
    """
    Upload image file to object storage
    """
    image = SwiftUploadObject(opts['image_file'])
    with SwiftService({'os_auth_token': opts['os_auth_token']}) as swift:
        try:
            for res in swift.upload(opts['container'], [image]):
                if 'response_dict' in res:
                    res['response_dict']['response_dicts'] = []
                debug(res)
        except SwiftError as err:
            print("error: %s" % str(err), file=sys.stderr)


def register(opts):
    """
    Register uploaded image

    Registeration has two phases. First a registeration request is send to API,
    and after that, API is polled for registeration status until registeration
    has succeeded or failed.

    Please, consult Fujitsu Foundation Service API Reference sections 1.6.3.1
    and 1.6.3.2 for details.

    Returns the results of the last status query.
    """
    action_url = IMPORT_BASE_URL.format(opts['region'])

    location = '/v1/AUTH_{}/{}/{}'.format(
        opts['project_id'],
        opts['container'],
        opts['image_file']
    )

    headers = ({
        'Content-Type': 'application/json',
        'X-Auth-Token': opts['os_auth_token']
    })

    payload = {
        'id': opts['image_id'],
        'name': opts['image_name'],
        'location': location,
        'os_type': opts['os_type']
    }

    if opts['region'] in DEMANDING_REGIONS:
        payload.update({
            'conversion': True,
            'disk_format': 'raw',
            'user_name': opts['username'],
            'password': b64encode(opts['password']),
            'domain_name': opts['domain_name']
        })

    if opts['sha1']:
        payload.update({'checksum': opts['sha1']})
    if opts['min_ram']:
        payload.update({'min_ram': opts['min_ram']})
    if opts['min_disk']:
        payload.update({'min_disk': opts['min_disk']})

    debug(payload)
    job = requests.post(action_url, headers=headers, data=json.dumps(payload)).json()
    debug(job)

    if 'import_id' not in job:
        print("error: Field 'import_id' not in image register reply", file=sys.stderr)
        sys.exit(1)

    print("Waiting...")
    sleep(IMPORT_STATUS_WAIT)

    print("Polling status...")
    loop_limit = STATUS_LOOP_LIMIT
    status_url = (IMPORT_BASE_URL + '/{}/status').format(opts['region'], job['import_id'])

    while loop_limit > 0:
        loop_limit -= 1
        res = requests.get(status_url, headers=headers)
        res_body = res.json()
        debug(res_body)
        status = res_body.get('import_status', 'unknown')
        print(IMPORT_STATUS_MSG.format(res.status_code, status, res_body.get('progress', '?')))
        if status in ['succeeded', 'failed']:
            return res_body
        else:
            sleep(IMPORT_STATUS_INTERVAL)


def main():
    # pylint: disable=W0603
    global DEBUG_MODE

    parser = ArgumentParser()
    parser.add_argument('--debug', action='store_true', help=HELP_DEBUG)
    parser.add_argument('-d', '--min-disk', type=int, help=HELP_MIN_DISK)
    parser.add_argument('-r', '--min-ram', type=int, help=HELP_MIN_RAM)
    parser.add_argument('-o', '--os-type', help=HELP_OS_TYPE)
    parser.add_argument('-c', '--sha1', help=HELP_SHA1)
    parser.add_argument('CONTAINER', help=HELP_CONTAINER)
    parser.add_argument('FILE', help='Path to the VMDK image file')
    parser.add_argument('NAME', help='Name of the image')
    args = parser.parse_args()

    DEBUG_MODE = args.debug

    path = os.path.abspath(args.FILE)

    if not os.path.exists(path) or not os.path.isfile(path):
        print("error: Could not find image file: %s" % path, file=sys.stderr)
        sys.exit(1)

    os.chdir(os.path.dirname(path))

    opts = {
        'region': get_env('OS_REGION_NAME'),
        'auth_url': get_env('OS_AUTH_URL'),
        'username': get_env('OS_USERNAME'),
        'password': get_env('OS_PASSWORD'),
        'project_id': get_env('OS_PROJECT_ID'),
        'project_name': get_env('OS_PROJECT_NAME'),
        'container': args.CONTAINER,
        'image_id': str(uuid4()),
        'image_name': args.NAME,
        'image_file': os.path.basename(path),
        'os_type': args.os_type if args.os_type else 'ubuntu',
        'min_disk': args.min_disk if args.min_disk else None,
        'min_ram': args.min_ram if args.min_ram else None,
        'sha1': args.sha1 if args.sha1 else None
    }

    if 'CONTRACT' in os.environ:
        opts.update({'domain_name': os.environ['CONTRACT']})
    elif 'OS_DEFAULT_DOMAIN' in os.environ:
        opts.update({'domain_name': os.environ['OS_DEFAULT_DOMAIN']})
    else:
        print("error: Environment variables CONTRACT or OS_DEFAULT_DOMAIN not set", file=sys.stderr)
        sys.exit(1)

    print("Authenticating...")
    token = get_auth_token(opts)

    if not token:
        print("error: Failed to acquire authentication token", file=sys.stderr)
        print("error: Please check required environment variables", file=sys.stderr)
        sys.exit(1)

    opts.update({'os_auth_token': token})
    debug(opts)

    print("Uploading to object storage...")
    upload(opts)

    print("Registering new image...")
    last_state = register(opts)

    if last_state.get('import_status') != 'succeeded':
        print("\nerror: Image import failed", file=sys.stderr)
        debug(last_state)
        sys.exit(1)
    else:
        print(SUCCESS_MSG.format(
            last_state.get('import_status'),
            last_state.get('id'),
            last_state.get('name'),
            last_state.get('min_ram'),
            last_state.get('min_disk')
        ))


if __name__ == "__main__":
    main()
